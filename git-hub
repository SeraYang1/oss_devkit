#!/usr/bin/env python
import subprocess 
from github import Github 
import yaml
import click
import getpass


@click.group()
def cli():
	pass

@cli.command()
@click.argument("command", default = "")
@click.argument("num", default = 0)
def hub(command,num):
	if command == "pr":
		#runs git and gets user and repo of current folder.
		process = subprocess.Popen("git remote -v", stdout=subprocess.PIPE)
		remotes = str(process.stdout.read())
		url = remotes.split(" ", 1)[0] #splits by first space to get the fetch url
		url = url.split("\\t", 1)[1]#takes out information("origin") before url
		arguments = url.split(".com:")[1] #gets just the username/repo.git
		arguments = arguments[:len(arguments) - 4] #takes out ".git"
		username, repo = arguments.split("/")
		
		#gets token from config folder.
		try:
			with open(".config/git-hub.yaml") as stream:
				yaml_file = str(yaml.load(stream))
				token = yaml_file.split("=")[1].strip()
		except:
			print("Needs an authentification token in ~/.config/git-hub.yaml")
			print("file simply says:")
			print("token = abc123")
			print("'abc123' being the token name from github ")

		#gets pr and runs command.
		try:
			g = Github(token)
			pr = g.get_user(username).get_repo(repo).get_pull(num)
			label = pr.head.label
			other_user, branch = label.split(":")
			remote_name = "\\n" + other_user + "\\t"
			if remote_name not in remotes: 
				print("git remote add " + other_user + " git@github.com:" + other_user + "/" + repo)
				p = subprocess.Popen("git remote add " + other_user + " git@github.com:" + other_user + "/" + repo)
				p.communicate()
			#print("git fetch " + other_user)
			p = subprocess.Popen("git fetch " + other_user, stdout = subprocess.PIPE)
			p.stdout.read()	
			subprocess.Popen("git checkout -b pr/" + str(num) + " " + other_user + "/" + branch)
			# print("git checkout -b pr/" + str(num) + " " + other_user + "/" + branch)
		
		except:
			print("The authentification token is not valid")
			print("or there is no pr with number" + str(num))
		


	else:
		print("invalid command")


if __name__ == "__main__":
	hub()	
