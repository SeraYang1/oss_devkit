#!/usr/bin/env python
import subprocess
import github
import yaml
import click
import sys
import textwrap
import json
import toml
import os
from urllib.request import urlopen, Request

def login():
    process = subprocess.Popen(["git","remote","-v"], stdout=subprocess.PIPE)
    remotes = str(process.stdout.read())
    url = remotes.split(" ", 1)[0]  # gets the fetch url
    arguments = url.split(".com")[1]  # gets just the username/repo.git
    arguments = arguments[1:]
    arguments = arguments.split(".git")[0]  # takes out ".git"
    username, repo = arguments.split("/")
    return (username, repo)

def getToken():
    # gets token from config folder.
    try:
        with open(os.path.expanduser("~/.config/git-hub.yaml")) as stream:
            yaml_file = str(yaml.load(stream))
            token = yaml_file.split("=")[1].strip()
            return token

    except (IndexError, FileNotFoundError) as e:
        print(textwrap.dedent("""Needs an authentification token in: ~/.config/git-hub.yaml
            file simply says: token = abc123
            Visit https://help.github.com/articles/
            creating-a-personal-access-token-for-the-command-line/"""))
        sys.exit(1)

def pr(num):
    """Pulls down and checkout the branch of the pr.

    This will run the following commands in the terminal:
    "git remote add user git@github.com:user/repo",
    "git fetch user",
    "git checkout -b pr/num user/branch"

    Parameters
    ----------
    num : integer
        The number of the pull request.
    """
    username, repo = login()
    token = getToken()

    # gets pr and runs command.
    try:
        g = github.Github(token)
        pr = g.get_user(username).get_repo(repo).get_pull(num)
        label = pr.head.label
        other_user, branch = label.split(":")
        process = subprocess.Popen(["git","remote","-v"], stdout=subprocess.PIPE)
        remotes = str(process.stdout.read())
        remote_name = "\\n" + other_user + "\\t"
        if remote_name not in remotes:
            print(other_user)
            print(repo)
            p = subprocess.Popen(["git", "remote", "add", other_user, f'git@github.com:{other_user}/{repo}'])
            p.communicate()
        p = subprocess.Popen(["git", "fetch", other_user],
                             stdout=subprocess.PIPE)
        p.stdout.read()
        subprocess.Popen(["git", "checkout", "-b",
                         f'pr/{num}', f'{other_user}/{branch}'])
        with open(".git_hub_cache", "w") as outfile:
            data = {"user": other_user, "pr": f'pr/{num}', "branch": branch}
            json.dump(data, outfile)

    except github.BadCredentialsException as e:
        print(e)
        print("The authentification token is not valid.")
        sys.exit(1)

    except github.UnknownObjectException as e:
        print(e)
        print(f'There is no pr with number {num}.')
        sys.exit(1)

def push():
    """Pushes changes back to a branch.

    This will run the following command:
    "git push user pr/num:branch"

    """
    try:
        with open(".git_hub_cache") as json_file:
            data = json.load(json_file)
            other_user = data["user"]
            pr = data["pr"]
            branch = data["branch"]
            p = subprocess.Popen(["git", "push", other_user, f'{pr}:{branch}'], stdout=subprocess.PIPE)
            p.stdout.read()
    except FileNotFoundError as e:
        print(e)
        print("This command must be used after git hub pr.")
        sys.exit(1)

def search(keyword, user, comment, number, branch):
    """Searches open and closed pull request comments for specified keyword.
    Opens pull-requests.toml file in .git folder to fetch pull requests.

    Parameters
    ----------
    keyword : string
        Search string were trying to match
    """
    try:
        open_prs = False
        closed_prs = False
        pathToGit = './'
        while not any(fname == '.git' for fname in os.listdir(pathToGit)):  #if not in directory with .git, keep going back to find file
            pathToGit = pathToGit+"../"
        pathToGit = pathToGit+".git/git-hub/pull-requests.toml"
        f = open(pathToGit,"r")
        pr_dict = toml.load(f)      #fetches toml file and creates a dictionary
        open_dict = pr_dict['open pull requests']
        closed_dict = pr_dict['closed pull requests']

        for key in open_dict.keys():        #iterates through and checks if open pull requsts have keyword
            pull = open_dict[key]
            if keyword:         #checks keyword
                if keyword.upper() in pull.upper() or keyword in str(key):
                    if not open_prs:
                        click.echo("OPEN pull requests")
                        open_prs = True
                    click.echo('{0}  {1}'.format(key, pull))
            else:               #checks for all other parameters
                tempUser, tempBranch = pull.split('/', 1)
                tempBranch, tempComment = tempBranch.split(': ',1)
                if number in str(key) and comment.upper() in tempComment.upper() and user.upper() in tempUser.upper() and branch.upper() in tempBranch.upper():
                    if not open_prs:
                        click.echo("OPEN pull requests")
                        open_prs = True
                    click.echo('{0}  {1}'.format(key, pull))



        for key in closed_dict.keys():
            pull = closed_dict[key]
            if keyword:
                if keyword.upper() in pull.upper() or keyword in str(key):
                    if not closed_prs:
                        if open_prs:
                            click.echo()
                            click.echo("--------------------------------")
                            click.echo()
                        click.echo("CLOSED pull requests")
                        closed_prs = True
                    click.echo('{0}  {1}'.format(key, pull))
            else:
                tempUser, tempBranch = pull.split('/', 1)
                tempBranch, tempComment = tempBranch.split(': ',1)
                if number in str(key) and comment.upper() in tempComment.upper() and user.upper() in tempUser.upper() and branch.upper() in tempBranch.upper():
                    if not closed_prs:
                        if open_prs:
                            click.echo()
                            click.echo("--------------------------------")
                            click.echo()
                        click.echo("CLOSED pull requests")
                        closed_prs = True
                    click.echo('{0}  {1}'.format(key, pull))

        if not open_prs and not closed_prs:     #outputs if keyword was not contained in pull requets comments
            click.echo("Could not find in pull requests. Update your pull requests with 'git hub sync' and try again.")
    except (OSError, IOError) as e:
        #if pull-requests.toml hasnt been created yet calls sync and then reties to fetch
        sync()
        search(keyword)

def sync():
    """Updates and saves pull-requests in pull-requests.toml in the .git folder. """
    username, repo = login()
    token = getToken()

    # saves pr into toml file
    try:
        g = github.Github(token)
        pathToGit = './'
        while not any(fname == '.git' for fname in os.listdir(pathToGit)):  #if not in directory with .git, keep going back to find file
            pathToGit = pathToGit+"../"
        pathToGit = pathToGit+".git/"
        if not any(fname == 'git-hub' for fname in os.listdir(pathToGit)):
            os.makedirs(pathToGit+"git-hub/")
        pathToGit = pathToGit+"git-hub/"
        filepath = os.path.join(pathToGit, 'pull-requests.toml')
        f = open(filepath, "w")
        to_write = "['open pull requests']\n"   #later will be convereted to toml to store

        #creates dictionaries in toml format as we scan though pull requests
        open_prs = g.get_user(username).get_repo(repo).get_pulls("open")
        for pr in open_prs:
            url =  'https://api.github.com/repos/{0}/{1}/pulls/{2}'.format(username, repo, pr.number)
            request = Request(url)
            request.add_header('Authorization', 'token %s' % token)
            response = urlopen(request)
            response = json.loads(response.read().decode('utf-8'))
            to_write = to_write + "{0} = '{1}/{2}: {3}'\n".format(pr.number, pr.user.name, response.get('head').get('ref') ,pr.title)

        to_write = to_write + "['closed pull requests']\n"
        closed_prs = g.get_user(username).get_repo(repo).get_pulls("closed")
        for pr in closed_prs:
            url =  'https://api.github.com/repos/{0}/{1}/pulls/{2}'.format(username, repo, pr.number)
            request = Request(url)
            request.add_header('Authorization', 'token %s' % token)
            response = urlopen(request)
            response = json.loads(response.read().decode('utf-8'))
            to_write = to_write + "{0} = '{1}/{2}: {3}'\n".format(pr.number, pr.user.name, response.get('head').get('ref') ,pr.title)

        #converts it to toml and stores in file
        toml_string = toml.loads(to_write)
        toml.dump(toml_string, f)


    except github.BadCredentialsException as e:
        print(e)
        print("The authentification token is not valid.")
        sys.exit(1)


@click.group()
def cli():
    pass


@cli.command()
@click.argument("command", default="")
@click.argument("args", nargs=-1)
@click.option('--user', '-u', default="", help = "search by user")
@click.option('--branch', '-b', default="", help = "search by branch")
@click.option('--comment', '-c', default="", help = "search by comment")
@click.option('--number', '-n', default="", help = "search by PR number")
@click.option('--keyword', '-k', default="", help = "search by all parameters")
def hub(command, args, user, comment, number, keyword, branch):
    if command == "pr":
        pr_num = int(args[0])
        pr(pr_num)

    elif command == "push":
        push()

    elif command == "search":
        search(keyword, user, comment, number, branch)

    elif command == "sync":
        sync()

    else:
        print("invalid command")
        sys.exit(1)


if __name__ == "__main__":
    hub()
