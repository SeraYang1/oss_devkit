#!/usr/bin/env python
import subprocess
import github
import yaml
import click
import sys
import textwrap
import os
import toml


def pr(num):
    """Pulls down and checkout the branch of the pr.

    This will run the following commands in the terminal:
    "git remote add user git@github.com:user/repo",
    "git fetch user",
    "git checkout -b pr/num user/branch"

    Parameters
    ----------
    num : integer
        The number of the pull request.
    """
    process = subprocess.Popen(["git", "remote", "-v"], stdout=subprocess.PIPE)
    remotes = str(process.stdout.read())
    url = remotes.split(" ", 1)[0]  # gets the fetch url
    arguments = url.split(".com")[1]  # gets just the username/repo.git
    arguments = arguments[1:]
    arguments = arguments[:len(arguments) - 4]  # takes out ".git"
    username, repo = arguments.split("/")

    # gets token from config folder.
    try:
        with open(os.path.expanduser("~/.config/git-hub.yaml")) as stream:
            yaml_file = str(yaml.load(stream))
            token = yaml_file.split("=")[1].strip()

    except (IndexError, FileNotFoundError) as e:
        print(textwrap.dedent("""Needs an authentification token in: ~/.config/git-hub.yaml
            file simply says: token = abc123
            Visit https://help.github.com/articles/
            creating-a-personal-access-token-for-the-command-line/"""))
        sys.exit(1)

    # gets pr and runs command.
    try:
        g = github.Github(token)
        pr = g.get_user(username).get_repo(repo).get_pull(num)
        label = pr.head.label
        other_user, branch = label.split(":")
        remote_name = "\\n" + other_user + "\\t"
        if remote_name not in remotes:
            p = subprocess.Popen(["git", "remote", "add", other_user,
                                 f'git@github.com:{other_user}/{repo}'])
            p.communicate()
        p = subprocess.Popen(["git", "fetch", other_user],
                             stdout=subprocess.PIPE)
        p.stdout.read()
        subprocess.Popen(["git", "checkout", "-b",
                         f'pr/{num}', f'{other_user}/{branch}'])
        if os.path.isfile(".git_hub_cache"):
            f = open(".git_hub_cache", "r")
        else:
            f = open(".git_hub_cache", "w+")
        pr_dict = toml.load(f)
        pr_data = {f'pr/{num}': {"branch": branch, "user": other_user}}
        pr_dict[f'pr/{num}'] = pr_data[f'pr/{num}']
        f = open(".git_hub_cache", "w")
        toml.dump(pr_dict, f)

    except github.BadCredentialsException as e:
        print(e)
        print("The authentification token is not valid.")
        sys.exit(1)

    except github.UnknownObjectException as e:
        print(e)
        print(f'There is no pr with number {num}.')
        sys.exit(1)


def push():
    """Pushes changes back to a branch.

    This will run the following command:
    "git push user pr/num:branch"

    """
    p = subprocess.Popen("git branch", stdout=subprocess.PIPE)
    pr = str(p.stdout.read())
    pr = pr.split("*", 1)[1].split()[0]
    pr = pr.replace("\\n", "").replace(" ", "").replace("'", "")
    try:
        f = open(".git_hub_cache", "r")
        pr_dict = toml.load(f)
        user = pr_dict[pr]['user']
        branch = pr_dict[pr]["branch"]
        p = subprocess.Popen(["git", "push", user,
                             f'{pr}:{branch}'], stdout=subprocess.PIPE)
        p.stdout.read()
    except FileNotFoundError as e:
        print(e)
        print("This command must be used after git hub pr.")
        sys.exit(1)


@click.group()
def cli():
    pass


@cli.command()
@click.argument("command", default="")
@click.argument("args", nargs=-1)
def hub(command, args):
    if command == "pr":
        pr_num = int(args[0])
        pr(pr_num)

    elif command == "push":
        push()

    else:
        print("invalid command")
        sys.exit(1)


if __name__ == "__main__":
    hub()
